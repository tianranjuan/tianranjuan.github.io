{"total":34,"pageSize":12,"pageCount":3,"data":[{"title":"OpenGL「四」：在文件中编写Shader","uid":"65e058b963273b5b3e940e3659fb3ebc","slug":"OpenGL4","date":"2021-12-29T16:00:00.000Z","updated":"2021-12-30T15:23:34.000Z","comments":true,"path":"api/articles/OpenGL4.json","cover":"https://cdn.stocksnap.io/img-thumbs/960w/animal-face_2P4CSFCJYF.jpg","text":"前面用到了Shader绘制了一个红色的三角形，但是Shader是硬编码在代码中的，虽然是OpenGL想让我们这么写的，但是在实际开发中那肯定是不靠谱的，所以这次就尝试把Shader写到独立的文件中使用。 设计Shader文件首先先在工程目录下创建文件res/shader/Basi...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"OpenGL","slug":"OpenGL","count":5,"path":"api/categories/OpenGL.json"}],"tags":[{"name":"游戏开发","slug":"游戏开发","count":10,"path":"api/tags/游戏开发.json"},{"name":"图形开发","slug":"图形开发","count":5,"path":"api/tags/图形开发.json"},{"name":"OpenGL","slug":"OpenGL","count":5,"path":"api/tags/OpenGL.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"OpenGL「三」：你好三角形","uid":"7d4eb62a0f031a2c66f45b6854b89b78","slug":"OpenGL3","date":"2021-12-21T16:00:00.000Z","updated":"2021-12-25T15:50:40.000Z","comments":true,"path":"api/articles/OpenGL3.json","cover":"https://images.unsplash.com/photo-1523371153586-b3b8e1782b44?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1632&q=80","text":"在之前的学习中，使用早期OpenGL绘制了一个三角形，以及了解了如何使用GLEW引入现代OpenGL的API,本篇就使用现代API重新的绘制一个三角形。全部代码截图放在最末尾了，留作参考。 渲染管线渲染管线指的是渲染的工作流程，不具体指向某一个单独的过程，也不是特指某一段编程代码...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"OpenGL","slug":"OpenGL","count":5,"path":"api/categories/OpenGL.json"}],"tags":[{"name":"游戏开发","slug":"游戏开发","count":10,"path":"api/tags/游戏开发.json"},{"name":"图形开发","slug":"图形开发","count":5,"path":"api/tags/图形开发.json"},{"name":"OpenGL","slug":"OpenGL","count":5,"path":"api/tags/OpenGL.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"关于0.1+0.2!=0.3这件事","uid":"6160cc6d102bffa77808f7eb2e12f02e","slug":"[分享]浮点数的定义","date":"2021-12-13T16:00:00.000Z","updated":"2022-01-16T08:52:19.636Z","comments":true,"path":"api/articles/[分享]浮点数的定义.json","cover":"https://cdn.stocksnap.io/img-thumbs/960w/curious-sheep_QNQ5HNPDTJ.jpg","text":"0.1 + 0.2 === 0.3吗？在JavaScript有一个经典的面试题，那就是”0.1 + 0.2 === 0.3吗？” 这个题看起来非常的弱智哈，只要小本毕业了肯定都秒答”必须的啊”，啊，要这么认为那这题肯定是挂了，嗯。 然后简单敲一下，啊，还真就错了。 原因是计算结果...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"分享","slug":"分享","count":2,"path":"api/categories/分享.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":3,"path":"api/tags/JavaScript.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"OpenGL「二」：使用现代OpenGL","uid":"48f3ebc985f2f9c9c1a27375e29f50ed","slug":"OpenGL2","date":"2021-12-10T16:00:00.000Z","updated":"2021-12-25T15:34:52.000Z","comments":true,"path":"api/articles/OpenGL2.json","cover":"https://images.unsplash.com/photo-1526336024174-e58f5cdd8e13?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80","text":"在上一篇中我们已经使用OpenGL成功的在窗口中绘制了一个白色三角形，虽然非常简单，但是使用的代码却是OpenGL1.1版本的老代码，在2021的今天那肯定是不满足我们了，所以在这篇我们来看看如何引入现代的OpenGL API。 现在OpenGL在哪？前面说过OpenGL的本质是...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"OpenGL","slug":"OpenGL","count":5,"path":"api/categories/OpenGL.json"}],"tags":[{"name":"游戏开发","slug":"游戏开发","count":10,"path":"api/tags/游戏开发.json"},{"name":"图形开发","slug":"图形开发","count":5,"path":"api/tags/图形开发.json"},{"name":"OpenGL","slug":"OpenGL","count":5,"path":"api/tags/OpenGL.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"OpenGL「一」：使用C++编写第一个OpenGL窗口程序","uid":"8d43fa0304d1f9bd1b2ad6d1921fba3a","slug":"OpenGL1","date":"2021-12-06T16:00:00.000Z","updated":"2021-12-25T15:34:44.000Z","comments":true,"path":"api/articles/OpenGL1.json","cover":"https://images.pexels.com/photos/9501403/pexels-photo-9501403.jpeg?cs=srgb&dl=pexels-alena-beliaeva-9501403.jpg&fm=jpg","text":"环境准备 VS2019 GLFW 下载GLFW一个轻量级的，开源的，跨平台的library。支持OpenGL及OpenGL ES，用来管理窗口，读取输入，处理事件等功能。需要这个库的原因是OpenGL本身只是标准，所以并没有提供窗口管理的功能，所以需要使用工具来帮助我们开发，而G...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"OpenGL","slug":"OpenGL","count":5,"path":"api/categories/OpenGL.json"}],"tags":[{"name":"游戏开发","slug":"游戏开发","count":10,"path":"api/tags/游戏开发.json"},{"name":"图形开发","slug":"图形开发","count":5,"path":"api/tags/图形开发.json"},{"name":"OpenGL","slug":"OpenGL","count":5,"path":"api/tags/OpenGL.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"OpenGL「零」：什么是OpenGL","uid":"9297302560a828b99950be98432fa02c","slug":"OpenGL0","date":"2021-12-05T16:00:00.000Z","updated":"2021-12-07T13:20:38.000Z","comments":true,"path":"api/articles/OpenGL0.json","cover":"https://images.pexels.com/photos/10071756/pexels-photo-10071756.jpeg?cs=srgb&dl=pexels-natalia-kolotvina-10071756.jpg&fm=jpg","text":" 提示 本系列内容全部来自Cherno的OpenGL系列视频，是对该系列内容的一个学习和总结，这个系列视频的目的是学习OpenGL的使用和思想，可能会使用非现代OpenGL的内容同时并不会实际开发一些可投入生产的库，所以代码仅供参考。 什么是OpenGLOpenGL一般被认为是一...","link":"","photos":[],"count_time":{"symbolsCount":971,"symbolsTime":"1 mins."},"categories":[{"name":"OpenGL","slug":"OpenGL","count":5,"path":"api/categories/OpenGL.json"}],"tags":[{"name":"游戏开发","slug":"游戏开发","count":10,"path":"api/tags/游戏开发.json"},{"name":"图形开发","slug":"图形开发","count":5,"path":"api/tags/图形开发.json"},{"name":"OpenGL","slug":"OpenGL","count":5,"path":"api/tags/OpenGL.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"WebGL简介","uid":"aca999fb1d2ad3a7f97e1cef456c301b","slug":"[分享]WebGL简介","date":"2021-04-24T16:00:00.000Z","updated":"2022-04-24T16:40:06.606Z","comments":true,"path":"api/articles/[分享]WebGL简介.json","cover":"https://cdn.stocksnap.io/img-thumbs/960w/crescent-moon_CO08LAFBTH.jpg","text":"OpenGLOpenGL一般被认为是一套跨平台的图形开发API，本质上是一套标准，所以和类似编程语言的标准一样OpenGL是没有代码实现的，其具体实现由显卡厂商进行实现。 OpenGL规范只是严格规定了每个函数该如何执行，以及它们的输出值。至于内部具体每个函数是如何实现的，将由O...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"分享","slug":"分享","count":2,"path":"api/categories/分享.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":3,"path":"api/tags/JavaScript.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"享元模式","uid":"36c783b7f07c9ef5c2531a5b03a12c76","slug":"享元模式","date":"2020-08-17T16:00:00.000Z","updated":"2021-12-07T13:55:02.000Z","comments":true,"path":"api/articles/享元模式.json","cover":"https://images.pexels.com/photos/3573351/pexels-photo-3573351.png?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","text":"描述享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。 通俗的说就是把相似对象的通用部分进行抽离成为元对象，并在原对象中进行引用，此时所有对象...","link":"","photos":[],"count_time":{"symbolsCount":357,"symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/tags/设计模式.json"},{"name":"游戏设计模式","slug":"游戏设计模式","count":3,"path":"api/tags/游戏设计模式.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"v8如何存储对象属性","uid":"5bb8772a21d2fa7313e330cd8614eb64","slug":"v8如何存储对象属性","date":"2020-08-14T16:00:00.000Z","updated":"2022-01-09T10:15:05.303Z","comments":true,"path":"api/articles/v8如何存储对象属性.json","cover":"https://images.pexels.com/photos/36717/amazing-animal-beautiful-beautifull.jpg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","text":"v8中属性的存放分为快慢属性两种，如果是数字索引则会分配在elements属性中使用线性查询，如果是慢属性则要复杂一些：当属性个数少于10个（这个数字可能根据对象申请时空间而变化）则这些属性会分配到对象内空间；如果属性个数多于10个则会把多出来的属性放到properties属性中...","link":"","photos":[],"count_time":{"symbolsCount":416,"symbolsTime":"1 mins."},"categories":[{"name":"V8","slug":"V8","count":1,"path":"api/categories/V8.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":3,"path":"api/tags/JavaScript.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"发布订阅模式与观察者模式的区别","uid":"51d32e32729eed215a5d3851fb64aa7c","slug":"发布订阅模式与观察者模式的区别","date":"2020-08-12T16:00:00.000Z","updated":"2021-12-07T13:54:58.000Z","comments":true,"path":"api/articles/发布订阅模式与观察者模式的区别.json","cover":"https://images.pexels.com/photos/325807/pexels-photo-325807.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","text":"角色上的区别观察者模式: subject(被观察者) observer(观察者) 发布订阅模式: Publisher(发布者) Subscriber(订阅者) Broker(中介人) 对于观察者(订阅者)的区别观察者模式: 直接存储在被观察者中，由被观察者直接的遍历通知观察者，对...","link":"","photos":[],"count_time":{"symbolsCount":760,"symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/tags/设计模式.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"观察者模式","uid":"cd55e9d94b94ab2ca447027ce4beeca6","slug":"观察者模式","date":"2020-08-11T16:00:00.000Z","updated":"2021-12-07T13:54:40.000Z","comments":true,"path":"api/articles/观察者模式.json","cover":"https://images.pexels.com/photos/53184/peacock-bird-plumage-color-53184.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","text":"描述观察者模式通过“主题”与“观察者”以低耦合的方式来解决对象间存在的一对多关系，如某一对象状态发生改变时，对其他依赖组件发送通知并自动更新。 应用场景具有一对多关系且需要同时更新的场景 游戏中的实例 数据变化与ui的绑定 成就系统 思考题: 观察者模式与发布订阅的区别 模式中的...","link":"","photos":[],"count_time":{"symbolsCount":301,"symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/tags/设计模式.json"},{"name":"游戏设计模式","slug":"游戏设计模式","count":3,"path":"api/tags/游戏设计模式.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"命令模式","uid":"35b7e7d45f0bf660fac88351c60754e3","slug":"命令模式","date":"2020-08-04T16:00:00.000Z","updated":"2021-12-07T13:54:50.000Z","comments":true,"path":"api/articles/命令模式.json","cover":"https://images.pexels.com/photos/814499/pexels-photo-814499.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","text":"描述命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。 应用场景gui 交互时可以使用。 快捷键所触发的指令 cmd...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/tags/设计模式.json"},{"name":"游戏设计模式","slug":"游戏设计模式","count":3,"path":"api/tags/游戏设计模式.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}