{"name":"js","slug":"js","count":4,"postlist":[{"title":"JavaScript工作原理之事件循环和基础的异步实现","uid":"043f9cbe38a0b25b8b616d2a4ca463e9","slug":"JavaScript工作原理之事件循环和基础的异步实现","date":"2019-03-28T06:22:44.000Z","updated":"2021-12-05T14:34:08.000Z","comments":true,"path":"api/articles/JavaScript工作原理之事件循环和基础的异步实现.json","keywords":null,"cover":[],"text":"事件循环 常规的JavaScript引擎是单线程的，也就是说所有的代码块都是顺序按照顺序被执行，这就导致遇到处理慢的代码块会阻塞软件的运行，甚至使程序停止响应，通常解决方案是使用异步来处理，把需要时间处理的代码块异步的进行处理，后面的块则继续执行，等到该代码块处理完以后再回过头来...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"js","slug":"js","count":4,"path":"api/categories/js.json"}],"tags":[],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"js中的柯里化实现","uid":"12ed2830258b8dcd4c32cee291a17957","slug":"js中的柯里化实现","date":"2019-04-24T06:50:27.000Z","updated":"2021-12-05T14:34:08.000Z","comments":true,"path":"api/articles/js中的柯里化实现.json","keywords":null,"cover":null,"text":"在计算机科学中，柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。 简单的来说柯里化就是把原本多参数的函数，转换成每次只接受一个参数，但是参数可传递的函数链来使用。 简单的例子 &...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"js","slug":"js","count":4,"path":"api/categories/js.json"}],"tags":[],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"js运算符优先级记录","uid":"9f65f9154397f0206bf8e3273761ecef","slug":"js运算符优先级记录","date":"2019-06-09T08:11:56.000Z","updated":"2021-12-05T14:34:08.000Z","comments":true,"path":"api/articles/js运算符优先级记录.json","keywords":null,"cover":null,"text":"最近在系统的重新学习js的知识，看到了优先级的相关资料，以前都没有注意到过的小细节，今天记录一下，如果以后有机会遇到相关的坑也方便找一下。| 优先级 | 运算类型 | 关联性 | 运算符 || ————- |:————-:| —–:| —:||20 |圆括号| n/a| ( … ...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"js","slug":"js","count":4,"path":"api/categories/js.json"}],"tags":[],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"[转]写好JavaScript条件语句的5条守则","uid":"4ed54b66406825cfd09b4a09d07c0870","slug":"写好JavaScript条件语句的5条守则(转)","date":"2019-03-28T06:21:57.000Z","updated":"2021-12-05T14:34:08.000Z","comments":true,"path":"api/articles/写好JavaScript条件语句的5条守则(转).json","keywords":null,"cover":null,"text":" 原文地址：5 Tips to Write Better Conditionals in JavaScript 原文作者：ecelyn Yeen(@jecelynyeen) 译文出自：阿里云翻译小组 译文链接：https://github.com/dawn-teams/trans...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"js","slug":"js","count":4,"path":"api/categories/js.json"}],"tags":[],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}