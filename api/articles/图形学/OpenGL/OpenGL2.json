{"title":"OpenGL「二」：使用现代OpenGL","uid":"48f3ebc985f2f9c9c1a27375e29f50ed","slug":"图形学/OpenGL/OpenGL2","date":"2021-12-10T16:00:00.000Z","updated":"2023-12-18T13:15:11.521Z","comments":true,"path":"api/articles/图形学/OpenGL/OpenGL2.json","keywords":null,"cover":"https://images.unsplash.com/photo-1526336024174-e58f5cdd8e13?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80","content":"<p>在上一篇中我们已经使用OpenGL成功的在窗口中绘制了一个白色三角形，虽然非常简单，但是使用的代码却是OpenGL1.1版本的老代码，在2021的今天那肯定是不满足我们了，所以在这篇我们来看看如何引入现代的OpenGL API。</p>\n<h1 id=\"现在OpenGL在哪？\"><a href=\"#现在OpenGL在哪？\" class=\"headerlink\" title=\"现在OpenGL在哪？\"></a>现在OpenGL在哪？</h1><p>前面说过OpenGL的本质是一个跨平台的图形标准，并没有实现代码，其具体实现是由显卡厂商具体实现的，所以各个版本的实现都是存在于我们的GPU中，正常情况下我们是无法定位到函数的位置，我们需要一种手段获取到存在GPU中的函数的地址让我们可以正常的调用它们，常规情况下我们可以借助系统函数来实现这一需求，比如：</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 查询名为apiName的函数</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">void</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">*</span><span style=\"color: #ABB2BF\">p </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">void</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">*</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #61AFEF\">wglGetProcAddress</span><span style=\"color: #ABB2BF\">(apiName);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 如果p存在则调用</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (p) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">p</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 如果没有可能还要判断是否在1.1版本中，实现兼容方案等</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">...</span></span></code></pre></div><p>可以看到手段是很繁琐的，就算是封装为函数了也需要考虑这样那样的兼容，非常的让人头大。</p>\n<p>但是我们作为一个一般的开发者，要是全部的函数都封装一遍还要跟上OpenGL的版本更新，那显然是不太现实的，所以我们就需要用到一些大佬们封装的库来降低开发成本，本次使用的<code>GLEW</code>就是其中广泛使用的库，下面就来学习下GLEW的配置和使用。</p>\n<h1 id=\"GLEW\"><a href=\"#GLEW\" class=\"headerlink\" title=\"GLEW\"></a>GLEW</h1><p>先来看下官网对于GLEW的描述：</p>\n<p>The OpenGL Extension Wrangler Library (GLEW) is a cross-platform open-source C&#x2F;C++ extension loading library. GLEW provides efficient run-time mechanisms for determining which OpenGL extensions are supported on the target platform. OpenGL core and extension functionality is exposed in a single header file. GLEW has been tested on a variety of operating systems, including Windows, Linux, Mac OS X, FreeBSD, Irix, and Solaris.</p>\n<p><strong>OpenGL扩展Wrangler库（GLEW）是一个跨平台的开源C&#x2F;C扩展加载库。GLEW提供了高效的运行时机制，用于确定目标平台上支持哪些OpenGL扩展。OpenGL核心和扩展功能在单个头文件中公开。GLEW已经在多种操作系统上进行了测试，包括Windows、Linux、Mac OS X、FreeBSD、Irix和Solaris。</strong></p>\n<p>根据官网的描述，可以知道GLEW是一个高效的确定目标平台上支持那些OpenGL的扩展，使用这个库可以保证我们平台无关的获取到想要的API，这里就包括我们说的现代API。</p>\n<p>这就是库就非常好的地方，就像JQuery之于前端一样，可以让我们完全的从各种版本和平台的兼容性中解放出来，专注于开发业务，而不是去写那无穷尽的hack。</p>\n<h1 id=\"配置GLEW环境\"><a href=\"#配置GLEW环境\" class=\"headerlink\" title=\"配置GLEW环境\"></a>配置GLEW环境</h1><p><strong>1.首先下载GLEW库</strong></p>\n<p><a href=\"http://glew.sourceforge.net/\">GLEW下载地址</a></p>\n<p><img src=\"/image/opengl/%E4%B8%8B%E8%BD%BDGLEW.png\" alt=\"下载GLEW\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这里下载编译好的包即可，如果是开发项目可以选择下载源码方便进行调试。</p></blockquote>\n<p><strong>2.解压文件</strong></p>\n<p><img src=\"/image/opengl/%E8%A7%A3%E5%8E%8BGLEW.png\" alt=\"解压GLEW\"></p>\n<p><strong>3.VS中的配置</strong></p>\n<p><strong>3.1添加到工程</strong></p>\n<p>把解压好的文件夹复制到工程的<code>\\Dependencies</code>下</p>\n<p><strong>3.2配置</strong></p>\n<p>配置附加目录</p>\n<p><img src=\"/image/opengl/GLEW%E9%99%84%E5%8A%A0%E5%8C%85%E5%90%AB%E7%9B%AE%E5%BD%95.png\" alt=\"GLEW附加包含目录\"></p>\n<p>配置附加依赖库</p>\n<p><img src=\"/image/opengl/GLEW%E9%99%84%E5%8A%A0%E5%BA%93.png\" alt=\"GLEW附加库\"></p>\n<p>配置附加依赖项</p>\n<p><img src=\"/image/opengl/GLEW%E9%99%84%E5%8A%A0%E4%BE%9D%E8%B5%96%E9%A1%B9.png\" alt=\"GLEW附加依赖项\"></p>\n<p>由于GLEW在运行时区分动态库和静态库，所以我们还需要配置一下宏，</p>\n<ol>\n<li>GLEW_STATIC：静态库宏</li>\n<li>GLEW_BUILD：动态库宏</li>\n</ol>\n<p><img src=\"/image/opengl/GLEW%E5%AE%8F%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81.png\" alt=\"GLEW宏定义代码\"></p>\n<p><code>右键点击工程</code>-&gt;<code>C/C++</code>-&gt;<code>预处理器</code>-&gt;<code>预处理器定义</code></p>\n<p><img src=\"/image/opengl/GLEW%E5%AE%8F%E5%AE%9A%E4%B9%89.png\" alt=\"GLEW宏定义\"></p>\n<h1 id=\"编写测试代码\"><a href=\"#编写测试代码\" class=\"headerlink\" title=\"编写测试代码\"></a>编写测试代码</h1><p>我们使用GLEW调用glGenBuffers函数并打印当前OpenGL版本号来进行测试。</p>\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">#include</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&lt;iostream&gt;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">// 引入GLEW</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">#include</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&lt;GL/glew.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">#include</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&lt;GLFW/glfw3.h&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">void</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    GLFWwindow </span><span style=\"color: #56B6C2\">*</span><span style=\"color: #ABB2BF\">window;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // ... 省略窗口创建过程</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    /* Make the window&#39;s context current */</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">glfwMakeContextCurrent</span><span style=\"color: #ABB2BF\">(window);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    // 初始化GLEW</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #61AFEF\">glewInit</span><span style=\"color: #ABB2BF\">() </span><span style=\"color: #C678DD\">!=</span><span style=\"color: #ABB2BF\"> GLEW_OK)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        std::cout </span><span style=\"color: #C678DD\">&lt;&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;GLEW is Error&quot;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">&lt;&lt;</span><span style=\"color: #ABB2BF\"> std::endl;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    //申请缓冲区</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">unsigned</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> a;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">glGenBuffers</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #56B6C2\">&amp;</span><span style=\"color: #ABB2BF\">a);</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    //打印OpenGL版本</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    std::cout </span><span style=\"color: #C678DD\">&lt;&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">glGetString</span><span style=\"color: #ABB2BF\">(GL_VERSION) </span><span style=\"color: #C678DD\">&lt;&lt;</span><span style=\"color: #ABB2BF\"> std::endl;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    //  ...省略绘制b部分</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\"> </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">glfwTerminate</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">&#125;</span></span></code></pre></div><p>运行结果</p>\n<p><img src=\"/image/opengl/GLEW%E6%B5%8B%E8%AF%95%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png\" alt=\"GLEW测试运行结果\"></p>\n<h1 id=\"Q-A\"><a href=\"#Q-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h1><h2 id=\"gl-h-included-before-glew-h\"><a href=\"#gl-h-included-before-glew-h\" class=\"headerlink\" title=\"gl.h included before glew.h\"></a>gl.h included before glew.h</h2><p><img src=\"/image/opengl/GLEW%E6%8A%A5%E9%94%99.png\" alt=\"GLEW报错\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>通过查阅官网的<a href=\"http://glew.sourceforge.net/basic.html\">Usage</a>可以得知，在调用glewInit前需要先创建一个有效的OpenGL渲染上下文，所以调用时间应在<code>glfwMakeContextCurrent</code>函数后再调用。</p></blockquote>\n<h2 id=\"无法解析的外部符号-imp-glewInit-0，函数-main-中引用了该符号\"><a href=\"#无法解析的外部符号-imp-glewInit-0，函数-main-中引用了该符号\" class=\"headerlink\" title=\"无法解析的外部符号 __imp__glewInit@0，函数 _main 中引用了该符号\"></a>无法解析的外部符号 __imp__glewInit@0，函数 _main 中引用了该符号</h2><p><img src=\"/image/opengl/GLEW%E6%8A%A5%E9%94%991.png\" alt=\"GLEW报错1\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>没有定义宏。</p></blockquote>\n","text":"在上一篇中我们已经使用OpenGL成功的在窗口中绘制了一个白色三角形，虽然非常简单，但是使用的代码却是OpenGL1.1版本的老代码，在2021的今天那肯定是不...","permalink":"/post/图形学/OpenGL/OpenGL2","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"图形学","slug":"图形学","count":5,"path":"api/categories/图形学.json"},{"name":"OpenGL","slug":"图形学/OpenGL","count":5,"path":"api/categories/图形学/OpenGL.json"}],"tags":[{"name":"游戏开发","slug":"游戏开发","count":10,"path":"api/tags/游戏开发.json"},{"name":"图形开发","slug":"图形开发","count":5,"path":"api/tags/图形开发.json"},{"name":"OpenGL","slug":"OpenGL","count":5,"path":"api/tags/OpenGL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%8E%B0%E5%9C%A8OpenGL%E5%9C%A8%E5%93%AA%EF%BC%9F\"><span class=\"toc-text\">现在OpenGL在哪？</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#GLEW\"><span class=\"toc-text\">GLEW</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AEGLEW%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">配置GLEW环境</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">编写测试代码</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Q-A\"><span class=\"toc-text\">Q&amp;A</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gl-h-included-before-glew-h\"><span class=\"toc-text\">gl.h included before glew.h</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A0%E6%B3%95%E8%A7%A3%E6%9E%90%E7%9A%84%E5%A4%96%E9%83%A8%E7%AC%A6%E5%8F%B7-imp-glewInit-0%EF%BC%8C%E5%87%BD%E6%95%B0-main-%E4%B8%AD%E5%BC%95%E7%94%A8%E4%BA%86%E8%AF%A5%E7%AC%A6%E5%8F%B7\"><span class=\"toc-text\">无法解析的外部符号 __imp__glewInit@0，函数 _main 中引用了该符号</span></a></li></ol></li></ol>","author":{"name":"天然卷打工战士","slug":"blog-author","avatar":"https://pic-blog-1255296193.cos.ap-beijing.myqcloud.com/touxiang.jpg","link":"/","description":"未看此花时， <br> 此花与汝同归于寂； <br> 来看此花时， <br> 此花颜色一时明白过来。","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"关于0.1+0.2!=0.3这件事","uid":"6160cc6d102bffa77808f7eb2e12f02e","slug":"浮点数的定义","date":"2021-12-13T16:00:00.000Z","updated":"2023-12-18T13:28:36.079Z","comments":true,"path":"api/articles/浮点数的定义.json","keywords":null,"cover":"https://cdn.stocksnap.io/img-thumbs/960w/curious-sheep_QNQ5HNPDTJ.jpg","text":" 0.1 + 0.2 === 0.3吗？在JavaScript有一个经典的面试题，那就是”0.1 + 0.2 === 0.3吗？” 这个题看起来非常的弱智哈，只...","permalink":"/post/浮点数的定义","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":5,"path":"api/tags/JavaScript.json"}],"author":{"name":"天然卷打工战士","slug":"blog-author","avatar":"https://pic-blog-1255296193.cos.ap-beijing.myqcloud.com/touxiang.jpg","link":"/","description":"未看此花时， <br> 此花与汝同归于寂； <br> 来看此花时， <br> 此花颜色一时明白过来。","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"OpenGL「一」：使用C++编写第一个OpenGL窗口程序","uid":"8d43fa0304d1f9bd1b2ad6d1921fba3a","slug":"图形学/OpenGL/OpenGL1","date":"2021-12-06T16:00:00.000Z","updated":"2025-09-28T06:51:43.118Z","comments":true,"path":"api/articles/图形学/OpenGL/OpenGL1.json","keywords":null,"cover":"https://images.pexels.com/photos/9501403/pexels-photo-9501403.jpeg?cs=srgb&dl=pexels-alena-beliaeva-9501403.jpg&fm=jpg","text":"环境准备 VS2019 GLFW 下载GLFW一个轻量级的，开源的，跨平台的library。支持OpenGL及OpenGL ES，用来管理窗口，读取输入，处理事...","permalink":"/post/图形学/OpenGL/OpenGL1","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"图形学","slug":"图形学","count":5,"path":"api/categories/图形学.json"},{"name":"OpenGL","slug":"图形学/OpenGL","count":5,"path":"api/categories/图形学/OpenGL.json"}],"tags":[{"name":"游戏开发","slug":"游戏开发","count":10,"path":"api/tags/游戏开发.json"},{"name":"图形开发","slug":"图形开发","count":5,"path":"api/tags/图形开发.json"},{"name":"OpenGL","slug":"OpenGL","count":5,"path":"api/tags/OpenGL.json"}],"author":{"name":"天然卷打工战士","slug":"blog-author","avatar":"https://pic-blog-1255296193.cos.ap-beijing.myqcloud.com/touxiang.jpg","link":"/","description":"未看此花时， <br> 此花与汝同归于寂； <br> 来看此花时， <br> 此花颜色一时明白过来。","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}