{"title":"js中的柯里化实现","uid":"12ed2830258b8dcd4c32cee291a17957","slug":"js中的柯里化实现","date":"2019-04-24T06:50:27.000Z","updated":"2023-12-18T13:29:22.804Z","comments":true,"path":"api/articles/js中的柯里化实现.json","keywords":null,"cover":null,"content":"<p>在计算机科学中，柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。</p>\n<p>简单的来说柯里化就是把原本多参数的函数，转换成每次只接受一个参数，但是参数可传递的函数链来使用。</p>\n<p>简单的例子</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 柯里化前</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">   </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">plus</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E06C75; font-style: italic\">a</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75; font-style: italic\">b</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">=&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">+</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">b</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">   </span><span style=\"color: #61AFEF\">plus</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">)  </span><span style=\"color: #7F848E; font-style: italic\">// 输出：3</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 柯里化后</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">plusTwoNum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E06C75; font-style: italic\">a</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75; font-style: italic\">b</span><span style=\"color: #ABB2BF\">)</span><span style=\"color: #C678DD\">=&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">a</span><span style=\"color: #56B6C2\">+</span><span style=\"color: #E06C75\">b</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">let</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">plus</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">fpu</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">curry</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">plusTwoNum</span><span style=\"color: #ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">plus</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">)(</span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #7F848E; font-style: italic\">// 输出：3</span></span></code></pre></div><p>上面是代码是很简单的一个函数柯里化例子，乍一看是没有什么特别的用处的，但是在某些场景是可以发乎很大的用处的，比如说当程序需要运行上面的sum函数，但是参数确实分开获取的，在某一时刻只能获取到其中的一个值a，值b需要一定条件后才能拿到的时候就可以使用柯里化来完美的解决这个问题。</p>\n<p>下面简单说一下柯里化的简单实现（想要支持更复杂的特性，需要自己进行增强）<br>先上代码</p>\n<div class=\"language-js\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">js</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #282c34\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// 函数自动柯里化</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #7F848E; font-style: italic\">// eg: new FPUtiles().curry((a,b,c,d) =&gt; a+b+c+d)(1)(2)(3)(4)</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF\">curry</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">fn</span><span style=\"color: #ABB2BF\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">_fn</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E06C75; font-style: italic\">restNum</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75; font-style: italic\">argList</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">=&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">restNum</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #56B6C2\">===</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">?</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">fn</span><span style=\"color: #ABB2BF\">(...</span><span style=\"color: #E06C75\">argList</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">:</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75; font-style: italic\">x</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">=&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">_fn</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\">restNum</span><span style=\"color: #56B6C2\">-</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">,[...</span><span style=\"color: #E06C75\">argList</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\">x</span><span style=\"color: #ABB2BF\">])</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">_fn</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">fn</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">length</span><span style=\"color: #ABB2BF\">,[])</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span></code></pre></div><p>下面开始整理思路：</p>\n<ul>\n<li>首先curry函数接收一个函数，这个函数是我们真正的处理逻辑的函数</li>\n<li>然后通过闭包，声明一个函数<code>_fn</code>，<code>_fn</code>接收两个参数，一个是真正函数的参数列表长度的计数器，一个是传入参数的列表</li>\n<li>在<code>_fn</code>函数中判断真正函数的参数列表是否等于0，等于0代表参数已经全部都传入进来了，可以调用真正的函数去进行计算，并返回<code>fn</code>函数进行计算然后返回结果；如果参数列表不等于0，则把参数列表的计数器-1，并把传入参数进行合并，然后使用返回<code>_fn</code>函数供尾递归调用。</li>\n</ul>\n<p>上面就是柯里化的大体思路，主要实现是依赖<code>闭包</code>和<code>尾递归</code>来实现的，所以在性能上有优化的同时也是有一定的损失，对于性能要求很苛刻的程序可能需要酌情考虑，一般情况下合理使用柯里化是可以把代码的可读性提高很多。</p>\n","text":"在计算机科学中，柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的...","permalink":"/post/js中的柯里化实现","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"天然卷打工战士","slug":"blog-author","avatar":"https://pic-blog-1255296193.cos.ap-beijing.myqcloud.com/touxiang.jpg","link":"/","description":"未看此花时， <br> 此花与汝同归于寂； <br> 来看此花时， <br> 此花颜色一时明白过来。","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"关于Vue兼容IE10","uid":"1c6f35bdc8ba11e47fd7fdb4a881c294","slug":"关于Vue兼容IE10","date":"2019-04-30T06:09:00.000Z","updated":"2023-12-18T13:28:32.769Z","comments":true,"path":"api/articles/关于Vue兼容IE10.json","keywords":null,"cover":null,"text":"因为Vue使用了ES6语法，而低版本IE浏览器不支持，解决方法是:使用**babel-polyfill**转换成ES5，具体办法 这个方法只能支持到**IE9为...","permalink":"/post/关于Vue兼容IE10","photos":[],"count_time":{"symbolsCount":801,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"天然卷打工战士","slug":"blog-author","avatar":"https://pic-blog-1255296193.cos.ap-beijing.myqcloud.com/touxiang.jpg","link":"/","description":"未看此花时， <br> 此花与汝同归于寂； <br> 来看此花时， <br> 此花颜色一时明白过来。","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"VSCode安装使用编程字体FiraCode","uid":"ca5f7333fd4afa33ba15d97463d47073","slug":"VSCode安装使用编程字体FiraCode","date":"2019-04-24T02:21:10.000Z","updated":"2025-09-28T09:23:30.318Z","comments":true,"path":"api/articles/VSCode安装使用编程字体FiraCode.json","keywords":null,"cover":[],"text":"FiraCode字体是一个可以把编程中常用的组合符号优化显示的字体 下面开始在VSCode中的配置 首先在FiraCode的github页面下载字体 把下载的压...","permalink":"/post/VSCode安装使用编程字体FiraCode","photos":[],"count_time":{"symbolsCount":340,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"天然卷打工战士","slug":"blog-author","avatar":"https://pic-blog-1255296193.cos.ap-beijing.myqcloud.com/touxiang.jpg","link":"/","description":"未看此花时， <br> 此花与汝同归于寂； <br> 来看此花时， <br> 此花颜色一时明白过来。","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}