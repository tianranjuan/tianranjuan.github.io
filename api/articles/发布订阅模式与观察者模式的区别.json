{"title":"发布订阅模式与观察者模式的区别","uid":"51d32e32729eed215a5d3851fb64aa7c","slug":"发布订阅模式与观察者模式的区别","date":"2020-08-12T16:00:00.000Z","updated":"2021-12-07T13:54:58.000Z","comments":true,"path":"api/articles/发布订阅模式与观察者模式的区别.json","keywords":null,"cover":"https://images.pexels.com/photos/325807/pexels-photo-325807.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","content":"<h2 id=\"角色上的区别\"><a href=\"#角色上的区别\" class=\"headerlink\" title=\"角色上的区别\"></a>角色上的区别</h2><p>观察者模式:</p>\n<ul>\n<li>subject(被观察者)</li>\n<li>observer(观察者)</li>\n</ul>\n<p>发布订阅模式:</p>\n<ul>\n<li>Publisher(发布者)</li>\n<li>Subscriber(订阅者)</li>\n<li>Broker(中介人)</li>\n</ul>\n<h2 id=\"对于观察者-订阅者-的区别\"><a href=\"#对于观察者-订阅者-的区别\" class=\"headerlink\" title=\"对于观察者(订阅者)的区别\"></a>对于观察者(订阅者)的区别</h2><p>观察者模式:</p>\n<p>直接存储在被观察者中，由被观察者直接的遍历通知观察者，对于某一被观察者而言需要维护自身的全部观察者。</p>\n<p>发布订阅模式:</p>\n<p>所有的订阅者通过订阅一个或多个topic(主题)的方式讲自身注册到中介人中。</p>\n<h2 id=\"对于被观察者-发布者-的区别\"><a href=\"#对于被观察者-发布者-的区别\" class=\"headerlink\" title=\"对于被观察者(发布者)的区别\"></a>对于被观察者(发布者)的区别</h2><p>观察者模式:</p>\n<p>在自身中存储全部的观察者对象，对于某一被观察者而言需要维护自身的全部观察者的监听状态。</p>\n<p>发布订阅模式:</p>\n<p>发布者不需要持有订阅者对象，只需要持有中介人对象即可，发布者可以不关心订阅者的存在与具体状态。</p>\n<h2 id=\"状态发生改变时的区别\"><a href=\"#状态发生改变时的区别\" class=\"headerlink\" title=\"状态发生改变时的区别\"></a>状态发生改变时的区别</h2><p>观察者模式:</p>\n<p>由被观察者直接遍历所有观察者并发送通知。</p>\n<p>发布订阅模式:</p>\n<p>发布者只需要告诉中介人自己需要更新那个topic(主题)即可，由中介人遍历通知所有订阅了该主题的订阅者。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>发布订阅与观察者相似，但区别在于<br>观察者模式中，subject(被观察者)、observer(观察者)都是派生自基类之中，其中被观察者直接持有观察者的指针，当被观察者状态发生改变时，由自身遍历所有观察者并发出通知。<br>而在发布订阅模式中则是多出一个中介人(broker)的角色与topic(主题)来进行消息的分发，也就是说当Publisher(相当于被观察者)发生变化时主动的调用中介人类并告知中介人自己要更新哪个主题下的状态此后由中介人来查找对应的主题下的Subscriber(相当于观察者)进行状态的更新，而Subscriber也只需要把自身注册到中介人中并告知中介人自己需要订阅哪些主题即可，此时订阅者与发布者只知道中介人存在而不知道彼此的存在。</p>\n","text":"角色上的区别观察者模式: subject(被观察者) observer(观察者) 发布订阅模式: Publisher(发布者) Subscriber(订阅者) Broker(中介人) 对于观察者(订阅者)的区别观察者模式: 直接存储在被观察者中，由被观察者直接的遍历通知观察者，对...","link":"","photos":[],"count_time":{"symbolsCount":760,"symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/tags/设计模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%92%E8%89%B2%E4%B8%8A%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">角色上的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E4%BA%8E%E8%A7%82%E5%AF%9F%E8%80%85-%E8%AE%A2%E9%98%85%E8%80%85-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">对于观察者(订阅者)的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E4%BA%8E%E8%A2%AB%E8%A7%82%E5%AF%9F%E8%80%85-%E5%8F%91%E5%B8%83%E8%80%85-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">对于被观察者(发布者)的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8A%B6%E6%80%81%E5%8F%91%E7%94%9F%E6%94%B9%E5%8F%98%E6%97%B6%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">状态发生改变时的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"v8如何存储对象属性","uid":"5bb8772a21d2fa7313e330cd8614eb64","slug":"v8如何存储对象属性","date":"2020-08-14T16:00:00.000Z","updated":"2022-01-09T10:15:05.303Z","comments":true,"path":"api/articles/v8如何存储对象属性.json","keywords":null,"cover":"https://images.pexels.com/photos/36717/amazing-animal-beautiful-beautifull.jpg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","text":"v8中属性的存放分为快慢属性两种，如果是数字索引则会分配在elements属性中使用线性查询，如果是慢属性则要复杂一些：当属性个数少于10个（这个数字可能根据对象申请时空间而变化）则这些属性会分配到对象内空间；如果属性个数多于10个则会把多出来的属性放到properties属性中...","link":"","photos":[],"count_time":{"symbolsCount":416,"symbolsTime":"1 mins."},"categories":[{"name":"V8","slug":"V8","count":1,"path":"api/categories/V8.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":2,"path":"api/tags/JavaScript.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"观察者模式","uid":"cd55e9d94b94ab2ca447027ce4beeca6","slug":"观察者模式","date":"2020-08-11T16:00:00.000Z","updated":"2021-12-07T13:54:40.000Z","comments":true,"path":"api/articles/观察者模式.json","keywords":null,"cover":"https://images.pexels.com/photos/53184/peacock-bird-plumage-color-53184.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","text":"描述观察者模式通过“主题”与“观察者”以低耦合的方式来解决对象间存在的一对多关系，如某一对象状态发生改变时，对其他依赖组件发送通知并自动更新。 应用场景具有一对多关系且需要同时更新的场景 游戏中的实例 数据变化与ui的绑定 成就系统 思考题: 观察者模式与发布订阅的区别 模式中的...","link":"","photos":[],"count_time":{"symbolsCount":301,"symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/tags/设计模式.json"},{"name":"游戏设计模式","slug":"游戏设计模式","count":3,"path":"api/tags/游戏设计模式.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}