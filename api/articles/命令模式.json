{"title":"命令模式","uid":"35b7e7d45f0bf660fac88351c60754e3","slug":"命令模式","date":"2020-08-04T16:00:00.000Z","updated":"2021-12-07T13:54:50.000Z","comments":true,"path":"api/articles/命令模式.json","keywords":null,"cover":"https://images.pexels.com/photos/814499/pexels-photo-814499.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>gui 交互时可以使用。</p>\n<ul>\n<li>快捷键所触发的指令</li>\n<li>cmd类指令式交互界面</li>\n</ul>\n<h2 id=\"游戏中的实例\"><a href=\"#游戏中的实例\" class=\"headerlink\" title=\"游戏中的实例\"></a>游戏中的实例</h2><ul>\n<li>回放功能: 只需要记录指令栈即可；</li>\n<li>宏命令功能: 将指令进行压缩，变成一个指令队列顺序执行；</li>\n<li>撤销（上一步）功能: 在命令中添加<code>undo</code>接口，并记录最后一次状态改变的值；</li>\n<li>键盘按键释放技能: 按下指定按键时，触发指定命令请求指定功能；</li>\n<li>技能按键绑定。</li>\n</ul>\n<h2 id=\"模式角色\"><a href=\"#模式角色\" class=\"headerlink\" title=\"模式角色\"></a>模式角色</h2><ol>\n<li><p>指令基类（command）</p>\n</li>\n<li><p>接收器（received）</p>\n</li>\n<li><p>请求发生器（invoker）</p>\n</li>\n<li><p>具体命令，继承自指令基类（ConcreteCommand）</p>\n</li>\n</ol>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>接收器，收音机</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class AudioPlayer &#123;\n    public void play() &#123;\n        System.out.println(&quot;播放...&quot;);\n    &#125;\n    public void rewind() &#123;\n        System.out.println(&quot;倒带...&quot;);\n    &#125;\n    public void stop() &#123;\n        System.out.println(&quot;停止...&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p>命令基类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface Command &#123;\n    &#x2F;**\n     * 执行方法\n     *&#x2F;\n    void execute();\n&#125;</code></pre>\n\n<p>命令具体实现类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class PlayCommand implements Command &#123;\n    private AudioPlayer myAudio;\n    public PlayCommand(AudioPlayer audioPlayer) &#123;\n        myAudio &#x3D; audioPlayer;\n    &#125;\n    &#x2F;**\n     * 执行方法\n     *&#x2F;\n    @Override\n    public void execute() &#123;\n        myAudio.play();\n    &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class RewindCommand implements Command &#123;\n    private AudioPlayer myAudio;\n    public RewindCommand(AudioPlayer myAudio) &#123;\n        this.myAudio &#x3D; myAudio;\n    &#125;\n    @Override\n    public void execute() &#123;\n        myAudio.rewind();\n    &#125;\n&#125;</code></pre>\n\n<p>请求发生器，键盘输入</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Keypad &#123;\n    private Command playCommand;\n    private Command rewindCommand;\n    private Command stopCommand;\n    public void setPlayCommand(Command playCommand) &#123;\n        this.playCommand &#x3D; playCommand;\n    &#125;\n    public void setRewindCommand(Command rewindCommand) &#123;\n        this.rewindCommand &#x3D; rewindCommand;\n    &#125;\n    public void setStopCommand(Command stopCommand) &#123;\n        this.stopCommand &#x3D; stopCommand;\n    &#125;\n    &#x2F;**\n     * 执行播放方法\n     *&#x2F;\n    public void play() &#123;\n        playCommand.execute();\n    &#125;\n    &#x2F;**\n     * 执行倒带方法\n     *&#x2F;\n    public void rewind() &#123;\n        rewindCommand.execute();\n    &#125;\n    &#x2F;**\n     * 执行播放方法\n     *&#x2F;\n    public void stop() &#123;\n        stopCommand.execute();\n    &#125;\n&#125;</code></pre>\n\n<p>客户端调用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Julia &#123;\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F; 创建接收者对象\n        AudioPlayer audioPlayer &#x3D; new AudioPlayer();\n        &#x2F;&#x2F; 创建命令对象\n        Command playCommand &#x3D; new PlayCommand(audioPlayer);\n        Command rewindCommand &#x3D; new RewindCommand(audioPlayer);\n        Command stopCommand &#x3D; new StopCommand(audioPlayer);\n        &#x2F;&#x2F; 创建请求对象\n        Keypad keypad &#x3D; new Keypad();\n        keypad.setPlayCommand(playCommand);\n        keypad.setRewindCommand(rewindCommand);\n        keypad.setStopCommand(stopCommand);\n        &#x2F;&#x2F; 测试\n        keypad.play();\n        keypad.rewind();\n        keypad.stop();\n        keypad.play();\n        keypad.stop();\n    &#125;\n&#125;</code></pre>\n\n","text":"描述命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。 应用场景gui 交互时可以使用。 快捷键所触发的指令 cmd...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/tags/设计模式.json"},{"name":"游戏设计模式","slug":"游戏设计模式","count":3,"path":"api/tags/游戏设计模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">描述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">应用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B8%B8%E6%88%8F%E4%B8%AD%E7%9A%84%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">游戏中的实例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E8%A7%92%E8%89%B2\"><span class=\"toc-text\">模式角色</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">实现</span></a></li></ol>","author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"观察者模式","uid":"cd55e9d94b94ab2ca447027ce4beeca6","slug":"观察者模式","date":"2020-08-11T16:00:00.000Z","updated":"2021-12-07T13:54:40.000Z","comments":true,"path":"api/articles/观察者模式.json","keywords":null,"cover":"https://images.pexels.com/photos/53184/peacock-bird-plumage-color-53184.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","text":"描述观察者模式通过“主题”与“观察者”以低耦合的方式来解决对象间存在的一对多关系，如某一对象状态发生改变时，对其他依赖组件发送通知并自动更新。 应用场景具有一对多关系且需要同时更新的场景 游戏中的实例 数据变化与ui的绑定 成就系统 思考题: 观察者模式与发布订阅的区别 模式中的...","link":"","photos":[],"count_time":{"symbolsCount":301,"symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/tags/设计模式.json"},{"name":"游戏设计模式","slug":"游戏设计模式","count":3,"path":"api/tags/游戏设计模式.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"MonoGame Nez分辨率切换ui定位不准","uid":"4733d01d48a0a10d2db65c3579578d4b","slug":"MonoGame Nez分辨率切换ui定位不准","date":"2020-06-18T16:00:00.000Z","updated":"2021-12-07T13:57:24.000Z","comments":true,"path":"api/articles/MonoGame Nez分辨率切换ui定位不准.json","keywords":null,"cover":"https://images.pexels.com/photos/598917/pexels-photo-598917.jpeg?auto=compress&cs=tinysrgb&dpr=3&h=750&w=1260","text":"在设置Stage.IsFullScreen属性为true时，切换分辨率会导致ui点击位置发生偏移，所以只需要把该属性设置为false或者不设置即可。 在设置Canvas.IsFullScreen属性为true时，在原分辨率下ui点击位置同样发生偏移，同时在切换分辨率时ui的定位也...","link":"","photos":[],"count_time":{"symbolsCount":172,"symbolsTime":"1 mins."},"categories":[{"name":"MonoGame","slug":"MonoGame","count":4,"path":"api/categories/MonoGame.json"}],"tags":[{"name":"游戏开发","slug":"游戏开发","count":10,"path":"api/tags/游戏开发.json"},{"name":"MonoGame","slug":"MonoGame","count":4,"path":"api/tags/MonoGame.json"},{"name":"Nez","slug":"Nez","count":2,"path":"api/tags/Nez.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}