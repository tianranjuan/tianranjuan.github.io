{"title":"v8如何存储对象属性","uid":"5bb8772a21d2fa7313e330cd8614eb64","slug":"v8如何存储对象属性","date":"2020-08-14T16:00:00.000Z","updated":"2022-01-09T10:15:05.303Z","comments":true,"path":"api/articles/v8如何存储对象属性.json","keywords":null,"cover":"https://images.pexels.com/photos/36717/amazing-animal-beautiful-beautifull.jpg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","content":"<p>v8中属性的存放分为快慢属性两种，如果是数字索引则会分配在elements属性中使用线性查询，如果是慢属性则要复杂一些：当属性个数少于10个（这个数字可能根据对象申请时空间而变化）则这些属性会分配到对象内空间；如果属性个数多于10个则会把多出来的属性放到properties属性中并使用线性方式存储；如果多于10个且远远多于10个则会将多出来的属性存储在properties上并使用非线性的存储方式（词典）</p>\n<p>思考题：为什么不推荐使用delete删除属性?</p>\n<p>原因1 delete并不是直接释放内存，而是切断引用从而间接的达到内存释放。<br>原因2 因为线性存储查改快，增删慢的特点，所以在使用delete的情况下，会从快慢属性的列表中移除该属性，导致线性存储触发增删操作，降低效率。<br>原因3 因为delete会移除快慢属性，所以在操作慢属性时，如果属性个数在临界值，可能会在增删的同时触发存储结构的重排（字典变化为线性）导致消耗更多的性能。</p>\n","text":"v8中属性的存放分为快慢属性两种，如果是数字索引则会分配在elements属性中使用线性查询，如果是慢属性则要复杂一些：当属性个数少于10个（这个数字可能根据对象申请时空间而变化）则这些属性会分配到对象内空间；如果属性个数多于10个则会把多出来的属性放到properties属性中...","link":"","photos":[],"count_time":{"symbolsCount":416,"symbolsTime":"1 mins."},"categories":[{"name":"V8","slug":"V8","count":1,"path":"api/categories/V8.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":2,"path":"api/tags/JavaScript.json"}],"toc":"","author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"享元模式","uid":"36c783b7f07c9ef5c2531a5b03a12c76","slug":"享元模式","date":"2020-08-17T16:00:00.000Z","updated":"2021-12-07T13:55:02.000Z","comments":true,"path":"api/articles/享元模式.json","keywords":null,"cover":"https://images.pexels.com/photos/3573351/pexels-photo-3573351.png?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","text":"描述享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。 通俗的说就是把相似对象的通用部分进行抽离成为元对象，并在原对象中进行引用，此时所有对象...","link":"","photos":[],"count_time":{"symbolsCount":357,"symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/tags/设计模式.json"},{"name":"游戏设计模式","slug":"游戏设计模式","count":3,"path":"api/tags/游戏设计模式.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"发布订阅模式与观察者模式的区别","uid":"51d32e32729eed215a5d3851fb64aa7c","slug":"发布订阅模式与观察者模式的区别","date":"2020-08-12T16:00:00.000Z","updated":"2021-12-07T13:54:58.000Z","comments":true,"path":"api/articles/发布订阅模式与观察者模式的区别.json","keywords":null,"cover":"https://images.pexels.com/photos/325807/pexels-photo-325807.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260","text":"角色上的区别观察者模式: subject(被观察者) observer(观察者) 发布订阅模式: Publisher(发布者) Subscriber(订阅者) Broker(中介人) 对于观察者(订阅者)的区别观察者模式: 直接存储在被观察者中，由被观察者直接的遍历通知观察者，对...","link":"","photos":[],"count_time":{"symbolsCount":760,"symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":4,"path":"api/tags/设计模式.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}