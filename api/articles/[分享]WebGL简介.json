{"title":"WebGL简介","uid":"aca999fb1d2ad3a7f97e1cef456c301b","slug":"[分享]WebGL简介","date":"2022-04-24T16:00:00.000Z","updated":"2022-04-25T13:11:50.631Z","comments":true,"path":"api/articles/[分享]WebGL简介.json","keywords":null,"cover":"https://cdn.stocksnap.io/img-thumbs/960w/crescent-moon_CO08LAFBTH.jpg","content":"<h1 id=\"OpenGL\"><a href=\"#OpenGL\" class=\"headerlink\" title=\"OpenGL\"></a>OpenGL</h1><p>OpenGL一般被认为是一套跨平台的图形开发API，本质上是一套标准，所以和类似编程语言的标准一样OpenGL是没有代码实现的，其具体实现由显卡厂商进行实现。</p>\n<p>OpenGL规范只是严格规定了每个函数该如何执行，以及它们的输出值。至于内部具体每个函数是如何实现的，将由OpenGL库的开发者自行决定。因为OpenGL规范并没有规定实现的细节，具体的OpenGL库允许使用不同的实现，只要其功能和结果与规范相匹配即可。</p>\n<p>正是由于具体实现由显卡厂商进行实现，所以在实际场景中各家显卡对OpenGL的支持以及实现方式都有所不同，导致同样的代码在不同显卡上会有不同表现，甚至是出现Bug。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>虽然OpenGL中带个Open字样，因为只是标准没有实现，同时具体实现都是由显卡厂商提供，而显卡厂商根本不会把自家驱动开源出来，所以其实根本没有开源一说。</p></blockquote>\n<h2 id=\"相似竞品\"><a href=\"#相似竞品\" class=\"headerlink\" title=\"相似竞品\"></a>相似竞品</h2><p>其他图形API还有诸如Direct3D、Vulkan、Metal等。</p>\n<h1 id=\"在其他平台上的OpenGL\"><a href=\"#在其他平台上的OpenGL\" class=\"headerlink\" title=\"在其他平台上的OpenGL\"></a>在其他平台上的OpenGL</h1><p>虽然OpenGL非常的强大以及流行，但是它的性能消耗也是不小的，所以在一些其他设备和平台上不足以支撑性能消耗的时候，为了适应平台OpenGL就推出了对应平台的精简绑定版。如：OpenGL2.x和OpenGL3.x。</p>\n<h1 id=\"浏览器中的OpenGL\"><a href=\"#浏览器中的OpenGL\" class=\"headerlink\" title=\"浏览器中的OpenGL\"></a>浏览器中的OpenGL</h1><p>在浏览器中也有一个OpenGL的绑定版也就是WebGL，WebGL是使浏览器也可以支持3D绘图的协议，WebGL的原理是允许把JavaScript和OpenGL ES结合在一起，通过增加OpenGL ES的一个JavaScript绑定来实现的。WebGL可以为HTML5 Canvas提供硬件3D加速渲染，这样Web程序就可以像桌面成一样借助系统显卡来在浏览器里更流畅地展示3D场景和模型了。</p>\n<h1 id=\"WebGL简介\"><a href=\"#WebGL简介\" class=\"headerlink\" title=\"WebGL简介\"></a>WebGL简介</h1><p>WebGL目前有两个版本：WebGL和WebGL2，其中WebGL是绑定的OpenGL ES 2.0，WebGL2绑定的是OpenGL ES 3.0。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>chrome 56 和firefox 51都已经支持了WebGL2。<br>但是如果显卡不支持或者没显卡，也能会出现版本够但是不支持的情况。</p></blockquote>\n<h2 id=\"状态机\"><a href=\"#状态机\" class=\"headerlink\" title=\"状态机\"></a>状态机</h2><p>同Canvas2d和OpenGL一样WebGL自身是一个巨大的状态机(State Machine)：一系列的变量描述WebGL此刻应当如何运行。WebGL的状态通常被称为WebGL上下文(Context)。</p>\n<p>我们通常使用如下途径去更改WebGL状态：设置选项，操作缓冲。最后，我们使用当前WebGL上下文来渲染。</p>\n<p><strong>举例</strong></p>\n<p>当我们想告诉WebGL去画线段而不是三角形的时候，我们通过改变一些上下文变量来改变WebGL状态，来告诉WebGL如何去绘图。一旦我们改变了WebGL的状态为绘制线段，当我们调用WebGL的绘图指令时，它就会根据当前上下文的状态进行实际的绘制动作，最终画出线段，而不是三角形。</p>\n<h2 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h2><ol>\n<li>首先WebGL的绘制环境还是需要基于Canvas标签</li>\n</ol>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;body onload&#x3D;&quot;main()&quot;&gt;\n  &lt;canvas id&#x3D;&quot;glcanvas&quot; width&#x3D;&quot;640&quot; height&#x3D;&quot;480&quot;&gt;\n    你的浏览器似乎不支持或者禁用了HTML5 &lt;code&gt;&lt;canvas&gt;&lt;&#x2F;code&gt; 元素.\n  &lt;&#x2F;canvas&gt;\n&lt;&#x2F;body&gt;</code></pre>\n\n<ol start=\"2\">\n<li>通过canvas的<code>getContext</code>函数来获取WebGL的上下文</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; 从这里开始\nfunction main() &#123;\n  const canvas &#x3D; document.querySelector(&quot;#glcanvas&quot;);\n  &#x2F;&#x2F; 初始化WebGL上下文\n  const gl &#x3D; canvas.getContext(&quot;webgl&quot;);\n\n  &#x2F;&#x2F; 确认WebGL支持性\n  if (!gl) &#123;\n    alert(&quot;无法初始化WebGL，你的浏览器、操作系统或硬件等可能不支持WebGL。&quot;);\n    return;\n  &#125;\n\n  &#x2F;&#x2F; 使用完全不透明的黑色清除所有图像\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);\n  &#x2F;&#x2F; 用上面指定的颜色清除缓冲区\n  gl.clear(gl.COLOR_BUFFER_BIT);\n&#125;</code></pre>\n\n<ol start=\"3\">\n<li>运行代码，将会得到一个使用黑色背景重绘的Canvas画布</li>\n</ol>\n<p>![ieee754](/image/share/webgl1/Pasted image 20220424214804.png)</p>\n","feature":true,"text":"OpenGLOpenGL一般被认为是一套跨平台的图形开发API，本质上是一套标准，所以和类似编程语言的标准一样OpenGL是没有代码实现的，其具体实现由显卡厂商进行实现。 OpenGL规范只是严格规定了每个函数该如何执行，以及它们的输出值。至于内部具体每个函数是如何实现的，将由O...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"分享","slug":"分享","count":2,"path":"api/categories/分享.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":3,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#OpenGL\"><span class=\"toc-text\">OpenGL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E4%BC%BC%E7%AB%9E%E5%93%81\"><span class=\"toc-text\">相似竞品</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E5%85%B6%E4%BB%96%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84OpenGL\"><span class=\"toc-text\">在其他平台上的OpenGL</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84OpenGL\"><span class=\"toc-text\">浏览器中的OpenGL</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#WebGL%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">WebGL简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8A%B6%E6%80%81%E6%9C%BA\"><span class=\"toc-text\">状态机</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">简单示例</span></a></li></ol></li></ol>","author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"OpenGL「四」：在文件中编写Shader","uid":"65e058b963273b5b3e940e3659fb3ebc","slug":"OpenGL4","date":"2021-12-29T16:00:00.000Z","updated":"2021-12-30T15:23:34.000Z","comments":true,"path":"api/articles/OpenGL4.json","keywords":null,"cover":"https://cdn.stocksnap.io/img-thumbs/960w/animal-face_2P4CSFCJYF.jpg","text":"前面用到了Shader绘制了一个红色的三角形，但是Shader是硬编码在代码中的，虽然是OpenGL想让我们这么写的，但是在实际开发中那肯定是不靠谱的，所以这次就尝试把Shader写到独立的文件中使用。 设计Shader文件首先先在工程目录下创建文件res/shader/Basi...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"OpenGL","slug":"OpenGL","count":5,"path":"api/categories/OpenGL.json"}],"tags":[{"name":"游戏开发","slug":"游戏开发","count":10,"path":"api/tags/游戏开发.json"},{"name":"图形开发","slug":"图形开发","count":5,"path":"api/tags/图形开发.json"},{"name":"OpenGL","slug":"OpenGL","count":5,"path":"api/tags/OpenGL.json"}],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}