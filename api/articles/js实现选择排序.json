{"title":"js实现选择排序","uid":"62f4259c1d3df5765faf228a85e43d10","slug":"js实现选择排序","date":"2020-01-04T14:00:07.000Z","updated":"2021-12-05T14:34:08.000Z","comments":true,"path":"api/articles/js实现选择排序.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是：第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。选择排序是不稳定的排序方法。</p></blockquote>\n<h2 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h2><ol>\n<li>使用线性查找当前待排序数据，找到最小值</li>\n<li>把最小值移动到数组最左边</li>\n<li>重复1、2步，直到数组全部完成排序</li>\n</ol>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p><strong>方式一：</strong></p>\n<p>使用递归实现，一次循环比较好读，容易理解，但效率较循环低一些</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">const unsort &#x3D; [6, 1, 7, 8, 9, 3, 5, 4, 2]\n\nconst selectedSort &#x3D; (arr, index &#x3D; 0) &#x3D;&gt; &#123;\t\n    let min &#x3D; arr[index]\n\n    const len &#x3D; arr.length\n\n    for (let i &#x3D; index; i &lt; len; i++) &#123;\n        const temp &#x3D; arr[i]\n        if (temp &lt; min) &#123;\n            arr[index] &#x3D; temp\n            arr[i] &#x3D; min\n            min &#x3D; temp\n        &#125;\n    &#125;\n\n    if (index &#x3D;&#x3D;&#x3D; len - 1) &#123;\n        return arr\n    &#125;\n    return selectedSort(arr, index + 1)\n&#125;\n\nconst sorted &#x3D; selectedSort(unsort)\n\nconsole.log(sorted)\n\n&#x2F;&#x2F; console: [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n</code></pre>\n\n<p>方式二：</p>\n<p>使用循环实现，两次循环，比较不好读，逻辑容易出现纰漏，效率比递归要高</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">const unsort &#x3D; [6, 1, 7, 8, 9, 3, 5, 4, 2]\n\nconst selectedSort &#x3D; (arr) &#x3D;&gt; &#123;\n    const len &#x3D; arr.length\n    let min\n    let temp\n    for (let i &#x3D; 0; i &lt; len; i++) &#123;\n        min &#x3D; arr[i]\n        temp\n        for (let j &#x3D; i + 1; j &lt; len; j++) &#123;\n            if (arr[j] &lt; min) &#123;\n                temp &#x3D; min\n                min &#x3D; arr[j]\n                arr[j] &#x3D; temp\n                arr[i] &#x3D; min\n            &#125;\n        &#125;\n    &#125;\n    return arr\n&#125;\n\nconst sorted &#x3D; selectedSort(unsort)\n\nconsole.log(sorted)\n\n&#x2F;&#x2F; console: [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n</code></pre>\n\n<h2 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h2><p>选择排序使用线性方式来查找最小值，所以每次循环都会比较<code>n-m</code>(m为循环次数)个数，直到最后一轮只比较一个数字，因此复杂度是（n - 1）+ (n - 2) + (n - 3) … + 1 ≈ n^2^ / 2, 忽略非重要项后为O(n^2^)</p>\n","text":" 选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是：第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"算法学习","slug":"算法学习","count":2,"path":"api/categories/算法学习.json"}],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">算法思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">理解</span></a></li></ol>","author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LeetCode：整数反转","uid":"80fa170694c2738a195b06ce828cfe4a","slug":"LeetCode：整数反转","date":"2020-02-29T13:39:30.000Z","updated":"2021-12-05T14:34:08.000Z","comments":true,"path":"api/articles/LeetCode：整数反转.json","keywords":null,"cover":null,"text":"LeetCode第7号问题：整数反转 题目描述给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。 示例： 输入: 123 输出: 321 输入: -123 输出: -321 输入: 120 输出: 21 注意:假设我们的环境只能存储得下 32 位的有符号整数...","link":"","photos":[],"count_time":{"symbolsCount":808,"symbolsTime":"1 mins."},"categories":[{"name":"算法学习","slug":"算法学习","count":2,"path":"api/categories/算法学习.json"}],"tags":[],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"使用VSCode编辑器debug调试Vue代码","uid":"90a976545b5488dd75ff7364ad12073f","slug":"使用VSCode编辑器debug调试Vue代码","date":"2019-12-25T16:24:33.000Z","updated":"2021-12-05T14:34:08.000Z","comments":true,"path":"api/articles/使用VSCode编辑器debug调试Vue代码.json","keywords":null,"cover":[],"text":" 环境为 vue-cli3、webpack、vscode 首先需要在VSCode中安装 Debugger for Chrome 插件 然后在debug配置中添加如下配置 配置代码 &#123; &quot;type&quot;: &quot;chrome&quot;, &quot...","link":"","photos":[],"count_time":{"symbolsCount":883,"symbolsTime":"1 mins."},"categories":[{"name":"vue","slug":"vue","count":2,"path":"api/categories/vue.json"}],"tags":[],"author":{"name":"打工战士","slug":"blog-author","avatar":"https://cdn.u1.huluxia.com/g4/M03/19/CD/rBAAdmGuLfyAds0SAACW7BZxpZU096.jpg","link":"/","description":"未看此花时，此花与汝同归于寂 <br> 来看此花时，此花颜色一时明白过来","socials":{"github":"https://github.com/tianranjuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}